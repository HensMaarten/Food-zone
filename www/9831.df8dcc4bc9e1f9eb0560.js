(self.webpackChunkcook_fusion=self.webpackChunkcook_fusion||[]).push([[9831],{9831:(n,e,o)=>{"use strict";o.r(e),o.d(e,{NetworkWeb:()=>s,Network:()=>a});var t=o(8107);function i(){const n=window.navigator.connection||window.navigator.mozConnection||window.navigator.webkitConnection;let e="unknown";const o=n?n.type||n.effectiveType:null;if(o&&"string"==typeof o)switch(o){case"bluetooth":case"cellular":e="cellular";break;case"none":e="none";break;case"ethernet":case"wifi":case"wimax":e="wifi";break;case"other":case"unknown":e="unknown";break;case"slow-2g":case"2g":case"3g":e="cellular";break;case"4g":e="wifi"}return e}class s extends t.Uw{constructor(){super(),this.handleOnline=()=>{const n=i();this.notifyListeners("networkStatusChange",{connected:!0,connectionType:n})},this.handleOffline=()=>{this.notifyListeners("networkStatusChange",{connected:!1,connectionType:"none"})},"undefined"!=typeof window&&(window.addEventListener("online",this.handleOnline),window.addEventListener("offline",this.handleOffline))}async getStatus(){if(!window.navigator)throw this.unavailable("Browser does not support the Network Information API");const n=window.navigator.onLine,e=i();return{connected:n,connectionType:n?e:"none"}}}const a=new s}}]);